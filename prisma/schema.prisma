// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DiscussionType {
  COURSE_REVIEW
  LESSON_DISCUSSION
}

enum ReactionType {
  LIKE // üëç
  LOVE // ‚ù§Ô∏è
  CARE // ü§ó
  HAHA // üòÑ
  WOW // üòÆ
  SAD // üò¢
  ANGRY // üò†
}

/// Represents a discussion thread that can be linked to either a course or lesson
model Thread {
  id            String         @id @default(uuid()) @db.Uuid
  type          DiscussionType
  resourceId    String         @db.Uuid
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime? // Supports soft delete
  posts         Post[]
  overallRating Float?

  @@index([resourceId])
}

/// Represents a post within a thread (main post, comment, or reply)
model Post {
  id       String @id @default(uuid()) @db.Uuid
  threadId String @db.Uuid
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  parentId String? @db.Uuid
  parent   Post?   @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Post[]  @relation("PostReplies")

  authorId String // User ID from User Service
  content  String
  rating   Int? // Only for course reviews
  isEdited Boolean @default(false)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  reactions Reaction[]

  @@index([parentId])
  @@index([threadId])
  @@index([authorId])
}

/// Represents a user's reaction to a post (one reaction per user per post)
model Reaction {
  id        String       @id @default(uuid()) @db.Uuid
  postId    String       @db.Uuid
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String // User ID from User Service
  type      ReactionType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([postId, userId])
  @@index([userId])
  @@index([type])
}
